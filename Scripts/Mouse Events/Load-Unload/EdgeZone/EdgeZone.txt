// Configuration
const CONFIG = {
    edgeZoneSize: 1, // activation zone (in pixels)
    debounceTime: 400,  // Protection against frequent triggers
    logs: false,

    displays: {
        display1: {  
            enabled: true,     // enable/disable first monitor (true/false)
            areas: {
                top: true,     // top area
                bottom: true,  // bottom area
                left: true,    // left area
                right: true    // right area
            }
        },
        display2: {
            enabled: false,    // enable/disable second monitor
            areas: {
                top: true,     // top area
                bottom: true,  // bottom area
                left: false,   // left area
                right: true    // right area
            }
        }
    }
};

const displayConfig = {
    displays: {
        display1: {
//-----------------------------top
            top: {
                areas: [


//{ enabled: true, from: 0, to: 15, process: { run: "C:\\Telegram\\Telegram.exe", title: "" }},

{ enabled: true, from: 0, to: 20, process: { name: "chrome", title: "" }},

//{ enabled: true, from: 21, to: 40, sendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_F]);" },

                   
{ enabled: true, from: 40, to: 60, process: { name: "everything", title: "" }},

//{ enabled: true, from: 30, to: 55, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendVKey(vk.HOME);" }, 

//                        { whenProcess: { name: "notepad" , title: "test" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_A]);" }, 

//                        { whenProcess: { name: "notepad" , title: "" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.HOME]);" }, 

//{ default: true, doProcess: { name: "everything", title: "" }}
//]},

//{ enabled: true, from: 56, to: 70, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendVKey(vk.END);" }, 

//                        { whenProcess: { name: "notepad" , title: "test" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_F]);" }, 

//                        { whenProcess: { name: "notepad" , title: "" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.END]);" }, 

//{ default: true, doProcess: { name: "everything", title: "" }}
//]},


//{ enabled: true, from: 80, to: 100, process: [
//                       { name: "Xnview", title: "" },
//                      { name: "everything", title: "" } ,
// ]},   
                ]
            },
//-----------------------------bottom
            bottom: {
                areas: [
                    // { enabled: true, from: 0, to: 10, process: { run: "C:\\Telegram.exe", title: "" }},
                    { enabled: true, from: 0, to: 10, process: { name: "explorer", title: "" }},
                    { enabled: true, from: 33, to: 66, process: { name: "mpc-hc64", title: "" }},
                    { enabled: true, from: 67, to: 80, process: { name: "steamwebhelper", title: "" }},
                    { enabled: true, from: 81, to: 100, process: { name: "deepl", title: "" }}
                ]
            },
//-----------------------------left
            left: {
                areas: [

//{ enabled: true, from: 0, to: 10, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_1]);" },  // if the process is chrome then Ctrl+1
//{ default: true, doProcess: { name: "", title: "" }}, // if any other process is simply ignored
//]},

//{ enabled: true, from: 0, to: 10, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_1]);" }, 

//{ default: true, doProcess: { name: "", title: "" }},
//]},

//{ enabled: true, from: 11, to: 25, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_2]);" }, 

//////{ default: true, doProcess: { name: "chrome", title: "" }},
//]},
//{ enabled: true, from: 26, to: 35, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_3]);" }, 

//////{ default: true, doProcess: { name: "chrome", title: "" }},
//]},

                    { enabled: true, from: 40, to: 60, process: { name: "strokesplus", title: "settings" }},
                    { enabled: true, from: 61, to: 100, process: { name: "strokesplus", title: "console" }},
                ]
            },
            right: {
//-----------------------------right
                areas: [
                    //{ enabled: true, from: 0, to: 20, process: { name: "aimp", title: "" }},
{ enabled: true, from: 0, to: 40, process: { name: "notepad", title: "stroke" }},
{ enabled: true, from: 41, to: 70, process: { name: "notepad", title: "" }},
                    ]},                          
        },
//===============================================================================================================
        display2: {
            top: {
                areas: [
                    //{ enabled: true, from: 0, to: 15, process: { run: "C:\\Telegram\\Telegram.exe", title: "" }},

{ enabled: true, from: 0, to: 20, process: { name: "chrome", title: "" }},

//{ enabled: true, from: 21, to: 40, sendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_F]);" },

                   
{ enabled: true, from: 40, to: 60, process: { name: "everything", title: "" }},

//{ enabled: true, from: 30, to: 55, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendVKey(vk.HOME);" }, 

//                        { whenProcess: { name: "notepad" , title: "edge" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_A]);" }, 

//                        { whenProcess: { name: "notepad" , title: "" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.HOME]);" }, 

//{ default: true, doProcess: { name: "everything", title: "" }}
//]},

//{ enabled: true, from: 56, to: 70, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendVKey(vk.END);" }, 

//                        { whenProcess: { name: "notepad" , title: "edge" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_F]);" }, 

//                        { whenProcess: { name: "notepad" , title: "" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.END]);" }, 

//{ default: true, doProcess: { name: "everything", title: "" }}
//]},



//{ enabled: true, from: 80, to: 100, process: [
//                       { name: "Xnview", title: "" },
//                      { name: "everything", title: "" } ,
// ]},   
                ]
            },
//-----------------------------bottom
            bottom: {
                areas: [
                    // { enabled: true, from: 0, to: 10, process: { run: "C:\\Telegram\\Telegram.exe", title: "" }},
                    { enabled: true, from: 0, to: 10, process: { name: "explorer", title: "" }},
                    { enabled: true, from: 33, to: 66, process: { name: "mpc-hc64", title: "" }},
                    { enabled: true, from: 67, to: 80, process: { name: "steamwebhelper", title: "" }},
                    { enabled: true, from: 81, to: 100, process: { name: "deepl", title: "" }}
                ]
            },
//-----------------------------left
            left: {
                areas: [

//{ enabled: true, from: 0, to: 10, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_1]);" },  // if the process is chrome then Ctrl+1
//{ default: true, doProcess: { name: "", title: "" }}, // if any other process is simply ignored
//]},

//{ enabled: true, from: 0, to: 10, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_1]);" }, 

//{ default: true, doProcess: { name: "", title: "" }},
//]},

//{ enabled: true, from: 11, to: 25, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_2]);" }, 

//////{ default: true, doProcess: { name: "chrome", title: "" }},
//]},
//{ enabled: true, from: 26, to: 35, actions: [
//                        { whenProcess: { name: "chrome" }, doSendKeys: "sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_3]);" }, 

//////{ default: true, doProcess: { name: "chrome", title: "" }},
//]},

                    { enabled: true, from: 40, to: 60, process: { name: "strokesplus", title: "settings" }},
                    { enabled: true, from: 61, to: 100, process: { name: "strokesplus", title: "console" }},
                ]
            },
            right: {
//-----------------------------right
                areas: [
                    //{ enabled: true, from: 0, to: 20, process: { name: "aimp", title: "" }},
{ enabled: true, from: 0, to: 40, process: { name: "notepad", title: "stroke" }},
{ enabled: true, from: 41, to: 70, process: { name: "notepad", title: "" }},
                    ]},                          
        
        }
    }
};

 // Function for logging, which is executed only if logs: true
function log(message, type = 'Info', color = null) {
    if (!CONFIG.logs) return;
    if (color) {
        sp.ConsoleLog(message, type, color);
    } else {
        sp.ConsoleLog(message, type);
    }
}

function logError(message, type = 'Error') {
    if (!CONFIG.logs) return;
    sp.ConsoleError(message, type);
}

// Variables for monitor logs control - created only if logs: true
const monitorState = CONFIG.logs ? {
    lastMonitorLogTime: 0,
    monitorLogDebounceTime: CONFIG.debounceTime
} : null;

function getDisplayConfig(screen) {
    try {
        const displayMatch = screen.DeviceName.match(/DISPLAY(\d+)/i);
        if (!displayMatch) {
            CONFIG.logs && logError(`Invalid display name format: ${screen.DeviceName}`);
            return null;
        }
        
        let displayNumber = displayMatch[1];
        let displayKey = `display${displayNumber}`;
        
        // Check if this monitor is turned on
        if (!CONFIG.displays[displayKey] || !CONFIG.displays[displayKey].enabled) {
            // Log only if logging is enabled
            if (CONFIG.logs && monitorState) {
                let currentTime = Date.now();
                if (currentTime - monitorState.lastMonitorLogTime >= 2000) {
                    log(`Display ${displayNumber} is disabled`, 'Monitor');
                    monitorState.lastMonitorLogTime = currentTime;
                }
            }
            return null;
        }
        
        // Return the object containing the settings and allowed areas
        return {
            config: displayConfig.displays[displayKey],
            enabledAreas: CONFIG.displays[displayKey].areas,
            displayKey: displayKey
        };
    } catch(e) {
        CONFIG.logs && logError('Error in getDisplayConfig: ' + e.message);
        return null;
    }
}
function getKeyName(key) {
   for (let k in vk) {
       if (vk[k] === key) return k;
   }
   return key;
}
function activateArea(area) {
    try {
        if (area.actions) {
            // Get information about the current window once
            let currentWindow = sp.ForegroundWindow();
            let currentProcessName = "";
            let currentTitle = "";
            
            try {
                currentProcessName = currentWindow.Process.MainModule.ModuleName.toLowerCase();
                currentTitle = currentWindow.Title.toLowerCase();
            } catch(e) {
                // Ignore errors when getting information about the window
            }
            
            // First we check if the process and the header match without calling findWindow
            let defaultAction = null;
            
            // Going through all the actions
            for (let action of area.actions) {
                if (action.whenProcess) {
                    let processNameMatch = action.whenProcess.name.toLowerCase();
                    let titleMatch = action.whenProcess.title ? action.whenProcess.title.toLowerCase() : "";
                    
                    // Direct check of process name and header
                    if (currentProcessName.includes(processNameMatch) && 
                        (!titleMatch || currentTitle.includes(titleMatch))) {
                        
                        // If you find a match, perform the action
                        if (action.doSendKeys) {
                            eval(action.doSendKeys);
                            CONFIG.logs && sp.ConsoleLog(`Activated process-specific keys: ${action.doSendKeys}`, 'KeyAction', System.Drawing.Color.Gold);
                        }
                        if (action.doProcess) {
                            activateProcess(action.doProcess);
                        }
                        return;
                    }
                } else if (action.default) {
                    // Save the default action, but do not execute it immediately
                    defaultAction = action;
                }
            }
            
            // If we have reached this point, it means that no suitable conditions were found
            // Execute the default action, if any
            if (defaultAction) {
                if (defaultAction.doSendKeys) {
                    eval(defaultAction.doSendKeys);
                    CONFIG.logs && sp.ConsoleLog(`Activated default keys: ${defaultAction.doSendKeys}`, 'KeyAction');
                }
                if (defaultAction.doProcess) {
                    activateProcess(defaultAction.doProcess);
                }
            }
        } else {
            // Old logic for backwards compatibility
            if (area.process) {
                activateProcess(area.process);
            }
            if (area.sendKeys) {
                eval(area.sendKeys);
                CONFIG.logs && sp.ConsoleLog(`Activated keys: ${area.sendKeys}`, 'KeyAction');
            }
        }
    } catch(e) {
        CONFIG.logs && sp.ConsoleError('Error in activateArea: ' + e.message, 'Error');
    }
}


// Global Statusе
let lastZone = null;
let lastActionTime = 0;
let processConfigArray;

// Searching for a window
function findWindow(processName, processTitle) {
    if (!processName) return null;
    
    const processNameLower = processName.toLowerCase();
    const processTitleLower = processTitle?.toLowerCase() || '';
    
    let result = null;
    const allWindows = sp.AllApplications();
    
    for (let i = 0; i < allWindows.Length; i++) {
        try {
            const window = allWindows[i];
            if (!window?.Visible) continue;
            
            const process = window.Process;
            if (!process?.MainModule) continue;
            
            if (process.MainModule.ModuleName.toLowerCase().includes(processNameLower) &&
                (!processTitle || window.Title.toLowerCase().includes(processTitleLower))) {
                result = window;
                break; // Abort the search after the first found window
            }
        } catch {
            continue;
        }
    }
    return result;
}

function isAtScreenEdge(mousePos, bounds) {
    const edge = CONFIG.edgeZoneSize;
    return {
        isLeft: mousePos.X <= bounds.Left + edge,
        isRight: mousePos.X >= bounds.Right - edge,
        isTop: mousePos.Y <= bounds.Top + edge,
        isBottom: mousePos.Y >= bounds.Bottom - edge
    };
}

function isInEdgeZone(mousePos, bounds, side, area) {
    const edge = CONFIG.edgeZoneSize;
    
    switch(side) {
        case 'top':
            return mousePos.Y <= bounds.Top + edge && 
                   mousePos.X >= bounds.Left + (area.from * bounds.Width / 100) && 
                   mousePos.X <= bounds.Left + (area.to * bounds.Width / 100);
        case 'bottom':
            return mousePos.Y >= bounds.Bottom - edge && 
                   mousePos.X >= bounds.Left + (area.from * bounds.Width / 100) && 
                   mousePos.X <= bounds.Left + (area.to * bounds.Width / 100);
        case 'left':
            return mousePos.X <= bounds.Left + edge && 
                   mousePos.Y >= bounds.Top + (area.from * bounds.Height / 100) && 
                   mousePos.Y <= bounds.Top + (area.to * bounds.Height / 100);
        case 'right':
            return mousePos.X >= bounds.Right - edge && 
                   mousePos.Y >= bounds.Top + (area.from * bounds.Height / 100) && 
                   mousePos.Y <= bounds.Top + (area.to * bounds.Height / 100);
        default:
            return false;
    }
}

function getActiveZone(mouseLocation, screen, displayData, edges) {
    if (!displayData) return null;
    
    const bounds = screen.Bounds;
    
    // Use the passed values or calculate them if they are not passed
    if (!edges) {
        edges = isAtScreenEdge(mouseLocation, bounds);
    }
    
    // If we're not at the edge, we get out
    if (!edges.isTop && !edges.isBottom && !edges.isLeft && !edges.isRight) {
        return null;
    }
    
    // Using the data already obtained
    const displayConfig = displayData.config;
    const areas = displayData.enabledAreas;
    
    // Check the sides only if they are enabled
    if (edges.isTop && areas.top && displayConfig.top) {
        const areaIndex = displayConfig.top.areas.findIndex(area => 
            area.enabled && isInEdgeZone(mouseLocation, bounds, 'top', area)
        );
        if (areaIndex !== -1) return `${screen.DeviceName}_top_${areaIndex}`;
    }
    
    if (edges.isBottom && areas.bottom && displayConfig.bottom) {
        const areaIndex = displayConfig.bottom.areas.findIndex(area => 
            area.enabled && isInEdgeZone(mouseLocation, bounds, 'bottom', area)
        );
        if (areaIndex !== -1) return `${screen.DeviceName}_bottom_${areaIndex}`;
    }
    
    if (edges.isLeft && areas.left && displayConfig.left) {
        const areaIndex = displayConfig.left.areas.findIndex(area => 
            area.enabled && isInEdgeZone(mouseLocation, bounds, 'left', area)
        );
        if (areaIndex !== -1) return `${screen.DeviceName}_left_${areaIndex}`;
    }
    
    if (edges.isRight && areas.right && displayConfig.right) {
        const areaIndex = displayConfig.right.areas.findIndex(area => 
            area.enabled && isInEdgeZone(mouseLocation, bounds, 'right', area)
        );
        if (areaIndex !== -1) return `${screen.DeviceName}_right_${areaIndex}`;
    }
    
    return null;
}

function activateProcess(processConfig) {
    // Local variables for tracking COM window objects
    let windowObjects = [];
    
    try {
        if (!processConfig) {
            CONFIG.logs && log('Invalid process config', 'Error', System.Drawing.Color.Red);
            return;
        }

        // If the program path is specified
        if (processConfig.run) {
            let fullPath = processConfig.run;
            let fileName = fullPath.split('\\').pop();
            let processNameWithoutExt = fileName.split('.')[0].toLowerCase();
            
            let foregroundWindow = sp.ForegroundWindow();
            windowObjects.push(foregroundWindow);
            
            try {
                let isActive = foregroundWindow.Process.ProcessName.toLowerCase().includes(processNameWithoutExt);
                
                if (isActive) {
                    // If the window is active, minimize it
                    CONFIG.logs && log(`Minimizing window: ${foregroundWindow.Title}`, 'WindowAction');
                    foregroundWindow.Minimize();
                } else {
                    // If the window is not active - start the program
                    CONFIG.logs && log(`Launching/activating program: ${fullPath}`, 'ProcessAction');
                    sp.RunProgram(fullPath, '', 'open', 'normal', true, false, false);
                }
            } catch(e) {
                //  In case of an error in checking the active window, we simply log it
                CONFIG.logs && logError('Error checking active window: ' + e.message);
            }
            return;
        }
        
        // Array or object processing with name
        let processConfigs;
        if (Array.isArray(processConfig)) {
            processConfigs = processConfig;
        } else {
            if (processConfigArray === undefined) {
                processConfigArray = [null]; // Create only once
            }
            processConfigArray[0] = processConfig;
            processConfigs = processConfigArray;
        }

        let allWindows = sp.AllApplications();
        let foundWindows = [];

        for (let i = 0; i < allWindows.Length; i++) {
            try {
                let window = allWindows[i];
                windowObjects.push(window);
                
                if (!window.Visible) continue;

                let moduleName = window.Process.MainModule.ModuleName.toLowerCase();
                
                for (let procConfig of processConfigs) {
                    if (!procConfig.name) continue;
                    
                    let processName = procConfig.name.toLowerCase();
                    if (moduleName.includes(processName)) {
                        if (!procConfig.title || 
                            window.Title.toLowerCase().includes(procConfig.title.toLowerCase())) {
                            foundWindows.push({
                                window: window,
                                processName: processName
                            });
                        }
                    }
                }
            } catch(e) {
                continue;
            }
        }

        if (foundWindows.length === 0) {
            if (CONFIG.logs) {
                let targetProcesses = processConfigs.map(p => {
                    let procName = p.name;
                    let procTitle = p.title ? ` (title: "${p.title}")` : '';
                    return procName + procTitle;
                }).join(', ');
                log(`No matching windows found (target: ${targetProcesses})`, 'Warning', System.Drawing.Color.Yellow);
            }
            return;
        }

        let shortWindowStack = sp.GetStoredObject("ShortWindowStack");
        if (!Array.isArray(shortWindowStack)) shortWindowStack = [];

        let foregroundWindow = sp.ForegroundWindow();
        windowObjects.push(foregroundWindow);
        
        let anyWindowActive = foundWindows.some(w => w.window.Equals(foregroundWindow));

        if (!anyWindowActive) {
            foundWindows.forEach(item => {
                if (item.window.Minimized && shortWindowStack.length > 0) {
                    // Take the last window from the stack (if you minimized it with the minimize gesture) 
                    let lastWindow = shortWindowStack[shortWindowStack.length - 1];
                    if (lastWindow && lastWindow.IsValid()) {
                        lastWindow.Activate(); // Activating a window from the stack
                    } else { // The window in the stack is invalid or does not exist
                        item.window.Restore();       // 1. Restores the window from the minimized state
                        item.window.BringToFront(); // 2. Puts a window on top of all other windows
                        item.window.Activate();     // 3. Makes the window active (gives it focus)
                    }
                }
                
                // Basic activation
                item.window.Activate();

                // Check if activation was successful
                if (!item.window.Equals(sp.ForegroundWindow())) {
                    CONFIG.logs && log(`Failed to activate window: ${item.window.Title}, retrying...`, 'Warning', System.Drawing.Color.Yellow);
                    
                    // Multiple activation attempts
                    for (let attempt = 0; attempt < 3; attempt++) { //  3 attempts
                        // Log the beginning of each attempt
                        CONFIG.logs && log(`Attempt ${attempt + 1} to activate window: ${item.window.Title}`, 'WindowAction', System.Drawing.Color.Red);
                        
                        sp.Sleep(50);
                        item.window.Activate();
                        
                        // Check if the window is active
                        if (item.window.Equals(sp.ForegroundWindow())) {
                            CONFIG.logs && log(`Window activated on attempt ${attempt + 1}: ${item.window.Title}`, 'WindowAction', System.Drawing.Color.Green);
                            break;
                        }
                        
                        // If it's a last-ditch effort and it fails.
                        if (attempt === 2) { 
                            CONFIG.logs && log(`Failed to activate window after 3 attempts: ${item.window.Title}`, 'Error', System.Drawing.Color.Red);
                        }
                    }
                } else {
                    CONFIG.logs && log(`Activated window: ${item.window.Title}`, 'WindowAction');
                }
            });
        } else {
            foundWindows.forEach(item => {
                if (!item.window.Minimized) {
                    // shortWindowStack.push(item.window);
                    item.window.Minimize();
                    CONFIG.logs && log(`Minimized window: ${item.window.Title}`, 'WindowAction', System.Drawing.Color.Coral);
                }
            });
        }
    } catch(e) {
        CONFIG.logs && logError('Error in activateProcess: ' + e.message);
    } finally {
        // Clear window references before exiting the function
        try {
            for (let i = 0; i < windowObjects.length; i++) {
                windowObjects[i] = null;
            }
            windowObjects = null;
            
            // Periodically (~ once every 50 calls) we perform garbage collection
            if (Math.random() < 0.02 && typeof gc === 'function') {
                gc();
            }
        } catch {}
    }
}

// Disabling the old handler when reloading the script
let oldHandler = sp.GetStoredObject("mouseMoveEvent");
if (oldHandler && oldHandler.GetType().FullName.includes('EventConnection')) {
    oldHandler.disconnect();
    sp.DeleteStoredObject("mouseMoveEvent");
}

// Initialization in the latest engine
if(__spEngineWrapper.Engine.Name == sp.EngineList().Last().Engine.Name) {
    CONFIG.logs && log('Initializing in last engine: ' + __spEngineWrapper.Engine.Name, 'Init');

let isActionInProgress = false;  // Initialization in the latest engine

let lastMouseX = -1;
let lastMouseY = -1;
const minMouseMoveDelta = 5; // Minimum mouse movement for processing (pixels)

var mouseMoveEvent = MouseHook.OnMouseHookMoveEventAsync.connect(function(sender, mouseHookEvent) {
    try {

        const currentTime = Date.now();
        if (currentTime - lastActionTime < CONFIG.debounceTime || isActionInProgress) {
            return;
        }

        // Skip mouse micromovements - use simple types
        const x = mouseHookEvent.Location.X;
        const y = mouseHookEvent.Location.Y;
        
        if (Math.abs(x - lastMouseX) < minMouseMoveDelta && 
            Math.abs(y - lastMouseY) < minMouseMoveDelta) {
            return;
        }
        lastMouseX = x;
        lastMouseY = y;

        const screen = Screen.FromPoint(mouseHookEvent.Location);
        if (!screen) {
            if (lastZone !== null) lastZone = null;
            return;
        }

        const bounds = screen.Bounds;
        const edge = CONFIG.edgeZoneSize;
        
        // Checking screen edges without creating new objects
        const isAtEdge = (
            x <= bounds.Left + edge || 
            x >= bounds.Right - edge || 
            y <= bounds.Top + edge || 
            y >= bounds.Bottom - edge
        );
        
        if (!isAtEdge) {
            if (lastZone !== null) lastZone = null;
            return;
        }

        //  Getting the display configuration
        const currentDisplay = getDisplayConfig(screen);
        if (!currentDisplay) {
            if (lastZone !== null) lastZone = null;
            return;
        }

        // Checking for zone changes
        const newZone = getActiveZone(mouseHookEvent.Location, screen, currentDisplay);
        if (newZone === lastZone) {
            return;
        }

        isActionInProgress = true;

        if (CONFIG.logs) {
            log(`Zone changed: ${lastZone} -> ${newZone} on ${screen.DeviceName}`, 'Zone', System.Drawing.Color.Olive);
        }
      
        if (newZone) {
            const zoneParts = newZone.split('_');
            const area = currentDisplay.config[zoneParts[1]].areas[parseInt(zoneParts[2])];
            activateArea(area);
        }
        
        lastActionTime = currentTime;
        lastZone = newZone;
        isActionInProgress = false;
        
        // Offer a garbage collector to do the pickup
        if (typeof gc === 'function' && Math.random() < 0.01) { // ~1% chance
            gc();
        }
    } catch(e) {
        isActionInProgress = false;
        CONFIG.logs && logError('Error in mouse handler: ' + e.message);
    }
});

    sp.StoreObject("mouseMoveEvent", mouseMoveEvent);
    CONFIG.logs && log('Mouse handler initialized', 'Init');
} else {
    CONFIG.logs && log('Skipping initialization in non-last engine: ' + __spEngineWrapper.Engine.Name, 'Init');
}