
ip (8.8.8.8)
(function () {
    // === SETTINGS ===
    var logs = true;

    // === COPY TEXT
    sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_C]);
    sp.Sleep(100);
    var text = clip.GetText().trim();

    if (logs) sp.ConsoleLog("[IP] Retrieved from clipboard: " + text, "DEBUG");

    if (isValidIP(text)) {
        if (logs) sp.ConsoleLog("[IP] Detected IP address: " + text, "DEBUG");

        var urls = [
            `https://ipinfo.io/${text}`          
        ];

        urls.forEach(function (url) {
            sp.RunProgram(url, "", "open", "normal", true, false, false);
        });

    } else {
        if (logs) {
            sp.ConsoleLog("[IP] Not a valid IP address: " + text, "WARN");
            sp.ShowBalloonTip("Not a valid IP address", text, "Warning", 4000);
        }
    }

    function isValidIP(ip) {
        return /^((25[0-5]|2[0-4]\d|1?\d\d?)\.){3}(25[0-5]|2[0-4]\d|1?\d\d?)$/.test(ip);
    }
})();

======================================================================================================================================

OpenCoordinates
N48.8584¬∞, E2.2945¬∞
-13.1631, -72.5450

(function () {
    // === SETTINGS ===
    var useCoordsParsing = true;           // üëâ Enable/disable coordinate parsing
    var mapService = "bing";               // üëâ google | osm | bing
    var logs = false;                      // üëâ Logs in console and balloon tooltips

    // === COPY SELECTED TEXT ===
    sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_C]);
    sp.Sleep(100);

    var text = clip.GetText().trim();
    if (logs) sp.ConsoleLog("[DEBUG] [CLIPBOARD] Received: " + text, "DEBUG");

    if (!useCoordsParsing) {
        if (logs) sp.ConsoleLog("[INFO] Coordinate parsing disabled (useCoordsParsing = false)", "INFO");
        return;
    }

    var coords = parseCoordinates(text);

    if (coords) {
        if (logs) sp.ConsoleLog(`[PARSED] Latitude: ${coords.lat}, Longitude: ${coords.lon}`, "DEBUG");

        var url = "";
        switch (mapService.toLowerCase()) {
            case "google":
                url = `https://www.google.com/maps?q=${coords.lat},${coords.lon}`;
                break;
            case "osm":
                url = `https://www.openstreetmap.org/?mlat=${coords.lat}&mlon=${coords.lon}#map=17/${coords.lat}/${coords.lon}`;
                break;
            case "bing":
                url = `https://bing.com/maps?cp=${coords.lat}~${coords.lon}&lvl=17`;
                break;
            default:
                if (logs) sp.ConsoleLog(`[ERROR] Unknown mapService: ${mapService}`, "ERROR");
                if (logs) sp.ShowBalloonTip("Error", "Unknown map type: " + mapService, "Warning", 4000);
                return;
        }

        sp.RunProgram(url, "", "open", "normal", true, false, false);
    } else {
        if (logs) sp.ConsoleLog("[ERROR] Could not recognize coordinates", "ERROR");
        if (logs) sp.ShowBalloonTip("Could not recognize coordinates", text, "Warning", 4000);
    }

    // === FUNCTION TO PARSE COORDINATES ===
    function parseCoordinates(text) {
    if (logs) sp.ConsoleLog("[DEBUG] [RAW] Before normalization: " + text, "DEBUG");

    text = text
  .replace(/(\d),(\d)/g, "$1.$2")                  // 1,2 ‚Üí 1.2
  .replace(/[‚Ä≤‚Äô']/g, "'")                          // Normalize minutes
  .replace(/[‚Ä≥‚Äù"]/g, '"')                          // Normalize seconds
  .replace(/([0-9])([¬∞¬∫])/g, "$1 ")                // Insert space after degrees
  .replace(/[¬∞¬∫]/g, " ")                           // Remove any remaining degree symbols
  .replace(/([NSWE])\./gi, "$1 ")                  // N. ‚Üí N
  .replace(/([NSWE])(\d)/gi, "$1 $2")              // N55 ‚Üí N 55
  .replace(/(\d)([NSWE])/gi, "$1 $2")              // 55N ‚Üí 55 N
  .replace(/(\d{1,3})\s*(\d{1,2}\.\d+)\s*([NSWE])/gi, "$1 $2' $3") // restore DMM (add apostrophe)
  .replace(/(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)\s*([NSWE])/gi, "$1 $2' $3\" $4") // restore DMS
  .replace(/\s+/g, " ")                            // Normalize whitespace
  .trim();

    if (logs) sp.ConsoleLog("[DEBUG] [CLEANED] After normalization: " + text, "DEBUG");

     // 1. Decimal with direction after number
        let postLabeled = text.match(/(-?\d{1,3}\.\d+)\s*([NSns])[\s,]+(-?\d{1,3}\.\d+)\s*([EWew])/);
        if (postLabeled) {
            let lat = parseFloat(postLabeled[1]);
            let lon = parseFloat(postLabeled[3]);
            if (postLabeled[2].toUpperCase() === "S") lat *= -1;
            if (postLabeled[4].toUpperCase() === "W") lon *= -1;
            return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
        }

        // 2. Decimal with direction before number
        let labeled = text.match(/[NSns]\s*(-?\d{1,3}\.\d+)\s+[EWew]\s*(-?\d{1,3}\.\d+)/);
        if (labeled) {
            let lat = parseFloat(labeled[1]);
            let lon = parseFloat(labeled[2]);
            return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
        }

        // 3. Degrees + minutes with direction
        let degMin = text.match(/(\d{1,3})\s*(\d{1,2}\.\d+)'\s*([NSns])[,\s]+(\d{1,3})\s*(\d{1,2}\.\d+)'\s*([EWew])/);
if (degMin) {
    let lat = Number(degMin[1]) + Number(degMin[2]) / 60;
    let lon = Number(degMin[4]) + Number(degMin[5]) / 60;
    if (degMin[3].toUpperCase() === "S") lat *= -1;
    if (degMin[6].toUpperCase() === "W") lon *= -1;
    return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
}

        // 4. Degrees + minutes + seconds with direction
        let dms = text.match(/(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"[NSns]?[,\s]+(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"[EWew]?/);
        if (dms) {
            let lat = Number(dms[1]) + Number(dms[2]) / 60 + Number(dms[3]) / 3600;
            let lon = Number(dms[4]) + Number(dms[5]) / 60 + Number(dms[6]) / 3600;
            return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
        }

        // 5. Decimal without direction 
        let decimal = text.match(/(-?\d{1,3}\.\d+)\s*[, ]\s*(-?\d{1,3}\.\d+)/);
        if (decimal) {
            return { lat: decimal[1], lon: decimal[2] };
        }

        // 6. DMM without direction 
        let degMinSimple = text.match(/(\d{1,3})\s*(\d{1,2}\.\d+)'[,\s]+(\d{1,3})\s*(\d{1,2}\.\d+)'/);
        if (degMinSimple) {
            let lat = Number(degMinSimple[1]) + Number(degMinSimple[2]) / 60;
            let lon = Number(degMinSimple[3]) + Number(degMinSimple[4]) / 60;
            return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
        }

        // 7. DMS without direction 
        let dmsSimple = text.match(/(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"[,\s]+(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"/);
        if (dmsSimple) {
            let lat = Number(dmsSimple[1]) + Number(dmsSimple[2]) / 60 + Number(dmsSimple[3]) / 3600;
            let lon = Number(dmsSimple[4]) + Number(dmsSimple[5]) / 60 + Number(dmsSimple[6]) / 3600;
            return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
        }

// 8. Direction label BEFORE value 
let dirFirst = text.match(/([NSns])\s*(-?\d{1,3}\.\d+)[,\s]+([EWew])\s*(-?\d{1,3}\.\d+)/);
if (dirFirst) {
    let lat = parseFloat(dirFirst[2]);
    let lon = parseFloat(dirFirst[4]);
    if (dirFirst[1].toUpperCase() === "S") lat *= -1;
    if (dirFirst[3].toUpperCase() === "W") lon *= -1;
    return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
}
// 9. Degrees + minutes with direction AFTER value (48 51.504' N, 2 17.670' E)
let dmmDirEnd = text.match(/(\d{1,3})\s*(\d{1,2}\.\d+)'\s*([NSns])[,\s]+(\d{1,3})\s*(\d{1,2}\.\d+)'\s*([EWew])/);
if (dmmDirEnd) {
    let lat = Number(dmmDirEnd[1]) + Number(dmmDirEnd[2]) / 60;
    let lon = Number(dmmDirEnd[4]) + Number(dmmDirEnd[5]) / 60;
    if (dmmDirEnd[3].toUpperCase() === "S") lat *= -1;
    if (dmmDirEnd[6].toUpperCase() === "W") lon *= -1;
    return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
}

// 10. Degrees + minutes + seconds with direction AFTER value (48¬∞51'30" N, 2¬∞17'40" E)
let dmsDirEnd = text.match(/(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"\s*([NSns])[,\s]+(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"\s*([EWew])/);
if (dmsDirEnd) {
    let lat = Number(dmsDirEnd[1]) + Number(dmsDirEnd[2]) / 60 + Number(dmsDirEnd[3]) / 3600;
    let lon = Number(dmsDirEnd[5]) + Number(dmsDirEnd[6]) / 60 + Number(dmsDirEnd[7]) / 3600;
    if (dmsDirEnd[4].toUpperCase() === "S") lat *= -1;
    if (dmsDirEnd[8].toUpperCase() === "W") lon *= -1;
    return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
}
// 11. DMM with direction AFTER value (13 09.786' S, 72 32.700' W)
let dmmDirAfter = text.match(/(\d{1,3})\s*(\d{1,2}\.\d+)'\s*([NSns])[,\s]+(\d{1,3})\s*(\d{1,2}\.\d+)'\s*([EWew])/);
if (dmmDirAfter) {
    let lat = Number(dmmDirAfter[1]) + Number(dmmDirAfter[2]) / 60;
    let lon = Number(dmmDirAfter[4]) + Number(dmmDirAfter[5]) / 60;
    if (dmmDirAfter[3].toUpperCase() === "S") lat *= -1;
    if (dmmDirAfter[6].toUpperCase() === "W") lon *= -1;
    return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
}

// 12. DMS with direction AFTER value (13 09'47" S, 72 32'42" W)
let dmsDirAfter = text.match(/(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"\s*([NSns])[,\s]+(\d{1,3})\s*(\d{1,2})'\s*(\d{1,2}(?:\.\d+)?)"\s*([EWew])/);
if (dmsDirAfter) {
    let lat = Number(dmsDirAfter[1]) + Number(dmsDirAfter[2]) / 60 + Number(dmsDirAfter[3]) / 3600;
    let lon = Number(dmsDirAfter[5]) + Number(dmsDirAfter[6]) / 60 + Number(dmsDirAfter[7]) / 3600;
    if (dmsDirAfter[4].toUpperCase() === "S") lat *= -1;
    if (dmsDirAfter[8].toUpperCase() === "W") lon *= -1;
    return { lat: lat.toFixed(6), lon: lon.toFixed(6) };
}
        return null;
    
    }
})();

========================================================================================================================================

Bitcoin (BTC)
1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
0x742d35Cc6634C0532925a3b844Bc454e4438f44e

(function() {
    var logs = false;

    // Copy selected text to clipboard
    sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_C]);
    sp.Sleep(100);
    var text = clip.GetText().trim();

    if (logs) sp.ConsoleLog("[CRYPTO] Retrieved from clipboard: " + text, "DEBUG");

    if (/^(1|3)[a-km-zA-HJ-NP-Z1-9]{25,34}$/.test(text)) {
        // Bitcoin legacy or P2SH address
        sp.RunProgram("https://www.blockchain.com/btc/address/" + text, "", "open", "normal", true, false, false);
    } else if (/^bc1[ac-hj-np-z02-9]{11,71}$/.test(text)) {
        // Bitcoin Bech32 address
        sp.RunProgram("https://www.blockchain.com/btc/address/" + text, "", "open", "normal", true, false, false);
    } else if (/^0x[a-fA-F0-9]{40}$/.test(text)) {
        // Ethereum / BNB
        sp.ShowBalloonTip("Network Check", "Opening as ETH (Etherscan). Manually verify if it's BNB (BSC).", "Info", 4000);
        sp.RunProgram("https://etherscan.io/address/" + text, "", "open", "normal", true, false, false);
    } else if (/^T[a-zA-Z0-9]{33}$/.test(text)) {
        // TRON / TRC-20
        sp.RunProgram("https://tronscan.org/#/address/" + text, "", "open", "normal", true, false, false);
    } else if (/^L[a-zA-Z0-9]{26,33}$/.test(text) || /^M[a-zA-Z0-9]{26,33}$/.test(text)) {
        // Litecoin
        sp.RunProgram("https://blockchair.com/litecoin/address/" + text, "", "open", "normal", true, false, false);
    } else if (/^D[a-zA-Z0-9]{33}$/.test(text)) {
        // Dogecoin
        sp.RunProgram("https://blockchair.com/dogecoin/address/" + text, "", "open", "normal", true, false, false);
    } else {
        if (logs) {
            sp.ConsoleLog("[CRYPTO] Not recognized: " + text, "WARN");
            sp.ShowBalloonTip("Not a crypto address", text, "Warning", 3000);
        }
    }
})();

======================================================================================================================================

Reveal full URL path of shortened links via unshorten.me (api) Sign up to get an API key
https://bit.ly/3DKWm5t

(function () {
    var logs = true;
    var apiToken = ""; // üîê Token from unshorten.me

    // Copy selected text to clipboard
    sp.SendModifiedVKeys([vk.LCONTROL], [vk.VK_C]);
    sp.Sleep(100);
    var shortUrl = clip.GetText().trim();

    // Add https if missing
    if (!/^https?:\/\//i.test(shortUrl)) {
        shortUrl = "https://" + shortUrl;
    }

    if (logs) sp.ConsoleLog("[Unshorten] Received: " + shortUrl, "DEBUG");

    var urlRegex = /^https?:\/\/[\w\-._~:?#@!$&'()*+,;=\/]+$/i;
    if (!urlRegex.test(shortUrl)) {
        sp.ShowBalloonTip("Error", "Clipboard does not contain a valid URL", "Warning", 4000);
        return;
    }

    // Check only known short domains
    var shortDomains = [
        "bit.ly", "t.co", "goo.gl", "tinyurl.com", "ow.ly", "is.gd",
        "buff.ly", "rebrand.ly", "shorte.st", "cutt.ly", "trib.al",
        "s.id", "rb.gy", "lnkd.in", "qr.ae", "soo.gd", "clicky.me",
        "aliclick.shop",
        "ya.cc"
    ];

    var parsedHost = shortUrl.replace(/^https?:\/\//, "").split("/")[0].toLowerCase();
    if (!shortDomains.includes(parsedHost)) {
        sp.ShowBalloonTip("Skip", "Not a shortened URL", "Info", 3000);
        return;
    }

    // Setup HTTP client
    var httpHandler = new HttpClientHandler();
    httpHandler.AutomaticDecompression = host.flags(DecompressionMethods.GZip, DecompressionMethods.Deflate);
    var client = new HttpClient(httpHandler);
    client.DefaultRequestHeaders.Add("Authorization", "Token " + apiToken);
    client.DefaultRequestHeaders.Add("accept", "application/json");

    var requestUrl = "https://unshorten.me/api/v2/unshorten?url=" + encodeURIComponent(shortUrl);

    if (logs) sp.ConsoleLog("[Unshorten] Request: " + requestUrl, "DEBUG");

    try {
        var response = client.GetAsync(requestUrl).Result;
        var result = response.Content.ReadAsStringAsync().Result;
        var json = JSON.parse(result);

        if (logs) {
            sp.ConsoleLog("[Unshorten] Response: " + JSON.stringify(json, null, 2), "DEBUG");
        }

        if (json.success && json.unshortened_url) {
            var finalUrl = json.unshortened_url;
            sp.ConsoleLog("[Unshorten] Final URL: " + finalUrl, "DEBUG");

            // Copy final URL to clipboard
            clip.SetText(finalUrl);

            sp.ShowBalloonTip("Unshorten", "Final URL copied to clipboard:\n" + finalUrl, "Info", 6000);
        } else {
            sp.ShowBalloonTip("Error", "Failed to get the final URL", "Warning", 4000);
            sp.ConsoleError("[Unshorten] Error: " + (json.error || "Unknown error"));
        }
    } catch (e) {
        sp.ShowBalloonTip("Error", e.message, "Error", 4000);
        sp.ConsoleError("[Unshorten] Exception: " + e.message);
    } finally {
        client.Dispose();
        httpHandler.Dispose();
    }
})();

