// Esc - Close 
// MouseButtons.Left - Output the result to the StrokePlus console

// Initialize the mouse position and window
var currpt = sp.GetCurrentMousePoint();
var wnd = sp.WindowFromPoint(currpt, false);

// Setup display text info
var info = new DisplayTextInfo();
info.MessageAlignment = "left";
info.Duration = 1000; // Duration of the message (can be changed)
info.Location = (currpt.X - 30) + ',' + (currpt.Y + 20); 
info.MessageFont = new Font("Segoe UI Semibold", 12);
info.BackColor = "black";
info.Padding = 0;
info.ClipToWorkingArea = false;

// Function to get file path from window title
function getFilePath(wnd) {
    var filePath = "";
    var processName = wnd.Process.ProcessName.toLowerCase();
    var windowTitle = wnd.Title;

    // Universal method to extract the path from the window title
    var titleMatch = windowTitle.match(/^(.*?(?:\.[\w]+)?)(?:\s*[-â€“]\s*|\s+\[|\s+\(|$)/);
    if (titleMatch) {
        filePath = titleMatch[1].trim();
    }

    // If the path is incomplete, try to get it from the command line
    if (!filePath.includes(":\\") && !filePath.startsWith("\\\\")) {
        var cmdLine = wnd.CommandLine;

        // Processing Notepad
        if (processName === "notepad") {
            var cmdParts = cmdLine.split('"');
            for (var i = 0; i < cmdParts.length; i++) {
                if (cmdParts[i].includes(".") && cmdParts[i].includes("\\") && !cmdParts[i].toLowerCase().endsWith("notepad.exe")) {
                    filePath = cmdParts[i];
                    break;
                }
            }
        } else { // Processing other applications
            var cmdMatch = cmdLine.match(/"([^"]+)"|(\S+)/g);
            if (cmdMatch && cmdMatch.length > 1) {
                filePath = cmdMatch[1].replace(/"/g, '');
            }
        }
    }

    return filePath;
}

// Function to update window info and display it
function updateWindowInfo() {
    var windowTitle = wnd.Title ? wnd.Title : "No Title";
    var parentWnd = wnd.Parent ? host.cast(nint, wnd.Parent.HWnd) : "No Parent";
    var filePath = getFilePath(wnd);

    var processInfo = "Unknown";
    var processPath = "Unknown Path";
    var startTime = "Unknown";
    try {
        if (wnd.Process && wnd.Process.MainModule) {
            processInfo = wnd.Process.MainModule.ModuleName;
            processPath = wnd.Process.MainModule.FileName;
            startTime = wnd.Process.StartTime ? wnd.Process.StartTime.ToString() : "Unknown";
        } else if (wnd.Process) {
            processInfo = wnd.Process.ProcessName;
        }
    } catch (e) {
        processInfo = "Access Denied";
    }

    var message = "x: " + currpt.X + " y: " + currpt.Y +
                  "\nParent Handle: " + parentWnd +  
                  "\nHandle: " + host.cast(nint, wnd.HWnd) +
                  "\nProcess: " + processInfo +
                  "\nProcess Path: " + processPath +
                  "\nFile Path: " + filePath +
                  "\nClass: " + wnd.ClassName +
                  "\nTitle: " + windowTitle +
                  "\nStart Time: " + startTime;

    info.Message = message;
    info.Location = (currpt.X - 30) + ',' + (currpt.Y + 20); 

    if (sp.IsButtonDown(MouseButtons.Left)) {
        sp.ConsoleError(message, "Window Info", System.Drawing.Color.Red);
    }
}

// Display initial message
updateWindowInfo();
sp.DisplayText(info); 

// Main loop
var lastWnd = null;
while (currpt.Y < 1070) {
    if (sp.IsKeyDown(vk.ESCAPE)) {
        break;
    }

    currpt = sp.GetCurrentMousePoint();
    wnd = sp.WindowFromPoint(currpt, false);

    if (!lastWnd || lastWnd.HWnd !== wnd.HWnd) {
        lastWnd = wnd;
        updateWindowInfo();
        sp.DisplayTextUpdate(info);
    }

    sp.Sleep(25); 
}

